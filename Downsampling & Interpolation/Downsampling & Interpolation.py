# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zHCN9EH2YKICt3wiuJSzzSTo-9FALmZG
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt


def get_user_input():
    """
    Prompts the user to enter a valid downsampling factor.

    Returns:
        downsampling_factor (int): The selected downsampling factor.
    """

    # Explanation before asking for input
    print("\n=== Image Downsampling & Interpolation ===")
    print("This program demonstrates how downsampling reduces image resolution and how different")
    print("interpolation techniques can be used to restore the original size.")
    print("\nüîπ Downsampling: Reduces the image size by keeping only 1 pixel every N pixels.")
    print("üîπ Nearest Neighbor: Restores image by repeating the closest pixel value.")
    print("üîπ Bilinear Interpolation: Uses weighted averaging to smooth the image.")
    print("\nYou will now choose a downsampling factor to see how it affects image quality.")
    print("============================================")

    while True:
        try:
            downsampling_factor = int(input("\nChoose a downsampling factor [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]: "))
            if downsampling_factor in [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]:
                return downsampling_factor
            else:
                print("‚ö†Ô∏è Invalid choice! Please enter one of the mentioned numbers.")
        except ValueError:
            print("‚ö†Ô∏è Invalid input! Please enter a valid number.")



def nearest_neighbor(downsampling_factor, image):
    """
    Applies Nearest Neighbor interpolation to restore the image size.

    Args:
        downsampling_factor (int): Factor by which the image was downsampled.
        image (np.array): The downsampled grayscale image.

    Returns:
        np.array: The upsampled image using nearest neighbor interpolation.
    """
    h, w = image.shape
    new_h, new_w = h * downsampling_factor, w * downsampling_factor
    resized_image = np.zeros((new_h, new_w), dtype=np.uint8)

    for i in range(new_h):
        for j in range(new_w):
            x = i // downsampling_factor
            y = j // downsampling_factor
            resized_image[i, j] = image[x, y]

    return resized_image


def bilinear(downsampling_factor, image):
    """
    Applies Bilinear interpolation to restore the image size.

    Args:
        downsampling_factor (int): Factor by which the image was downsampled.
        image (np.array): The downsampled grayscale image.

    Returns:
        np.array: The upsampled image using bilinear interpolation.
    """
    h, w = image.shape
    new_h, new_w = h * downsampling_factor, w * downsampling_factor
    resized_image = np.zeros((new_h, new_w), dtype=np.uint8)

    for i in range(new_h):
        for j in range(new_w):
            x = i / downsampling_factor
            y = j / downsampling_factor

            x0, y0 = int(np.floor(x)), int(np.floor(y))
            x1, y1 = min(x0 + 1, h - 1), min(y0 + 1, w - 1)

            dx, dy = x - x0, y - y0

            top_left = image[x0, y0]
            top_right = image[x0, y1]
            bottom_left = image[x1, y0]
            bottom_right = image[x1, y1]

            top = top_left * (1 - dy) + top_right * dy
            bottom = bottom_left * (1 - dy) + bottom_right * dy
            value = top * (1 - dx) + bottom * dx

            resized_image[i, j] = np.clip(value, 0, 255)

    return resized_image


def display_images(original, downsampled, nearest, bilinear):
    """
    Displays the original, downsampled, nearest neighbor, and bilinear interpolated images.

    Uses 'extent' to ensure the downsampled image appears smaller in Matplotlib.

    Args:
        downsampled (np.array): Downsampled image.
        nearest (np.array): Nearest neighbor upsampled image.
        bilinear (np.array): Bilinear upsampled image.
    """
    plt.figure(figsize=(9, 6))

    plt.subplot(1, 3, 1)
    plt.imshow(downsampled, cmap='gray', extent=[0, original.shape[1], 0, original.shape[0]])
    plt.title("Downsampled Image")
    plt.axis("off")

    plt.subplot(1, 3, 2)
    plt.imshow(nearest, cmap='gray', extent=[0, original.shape[1], 0, original.shape[0]])
    plt.title("Nearest Neighbor")
    plt.axis("off")

    plt.subplot(1, 3, 3)
    plt.imshow(bilinear, cmap='gray', extent=[0, original.shape[1], 0, original.shape[0]])
    plt.title("Bilinear Interpolation")
    plt.axis("off")

    plt.tight_layout()
    plt.show()



def save_images(downsampled, nearest, bilinear):
    """
    Saves the transformed images.

    Args:
        downsampled (np.array): Downsampled image.
        nearest (np.array): Nearest neighbor upsampled image.
        bilinear (np.array): Bilinear upsampled image.
    """
    cv2.imwrite("Downsampled_Image.jpg", downsampled)
    cv2.imwrite("Nearest_Neighbor_Image.jpg", nearest)
    cv2.imwrite("Bilinear_Image.jpg", bilinear)

    print("\n‚úÖ Images saved successfully!")
    print("Downsampled Image saved as 'Downsampled_Image.jpg'")
    print("Nearest Neighbor Image saved as 'Nearest_Neighbor_Image.jpg'")
    print("Bilinear Image saved as 'Bilinear_Image.jpg'")


# === Main Program ===

# Load image
image_path = r"C:\Users\ahmad\Python codes\Digital Image Processing\images\photo_4.jpg"
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Check if image is loaded successfully
if image is None:
    print("‚ùå Error: Image not found. Please check the file path.")
    exit()

# Display original image
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis("off")
plt.show()

# Get user input for downsampling factor
downsampling_factor = get_user_input()

# Perform downsampling
downsampled_image = image[::downsampling_factor, ::downsampling_factor]

# Perform Nearest Neighbor and Bilinear interpolation
nearest_neighbor_image = nearest_neighbor(downsampling_factor, downsampled_image)
bilinear_image = bilinear(downsampling_factor, downsampled_image)

# Display results
display_images(image, downsampled_image, nearest_neighbor_image, bilinear_image)

# Save images
save_images(downsampled_image, nearest_neighbor_image, bilinear_image)

# Notify the user to check saved images for correct size comparison
print("\n‚ö†Ô∏è Note: Matplotlib scales all images to the same display size, which may make them look similar.")
print("‚úÖ To see the true size difference, please check the saved images in your folder!")