# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zHCN9EH2YKICt3wiuJSzzSTo-9FALmZG
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt


def get_user_inputs():
    """Prompts user for gamma (γ) and c values for Power Law Transformation, ensuring valid input."""
    print("\n=== Image Enhancement Parameters ===")
    print("Your image appears dark, making details hard to see. We will apply both enhancements:")
    print("\n1️⃣ Power Law Transformation (Gamma Correction)")
    print("   - Formula: s = c * r^γ")
    print("   - If γ < 1 → The image becomes brighter.")
    print("   - If γ > 1 → The image becomes darker.")
    print("\n2️⃣ Histogram Equalization")
    print("   - Automatically adjusts contrast by redistributing pixel intensities.")
    print("\n=================================")

    while True:
        try:
            gamma = float(input("\nEnter γ value (Recommended: 0 < γ < 1 for brightening): "))
            if gamma > 0:
                while True:
                    try:
                        c = float(input("Enter c value (Recommended: c > 0, typically 1): "))
                        if c > 0:
                            return gamma, c
                        else:
                            print("⚠️ Invalid input! c must be greater than 0.")
                    except ValueError:
                        print("⚠️ Invalid input! Please enter a numeric value for c.")
            else:
                print("⚠️ Invalid input! γ must be greater than 0.")
        except ValueError:
            print("⚠️ Invalid input! Please enter a numeric value for γ.")




def compute_pdf(image):
    """Computes and returns the Probability Density Function (PDF) of an image."""
    h, w = image.shape
    hist = np.zeros(256, dtype=int)

    # Compute histogram
    for i in range(h):
        for j in range(w):
            hist[image[i, j]] += 1

    # Convert to PDF by normalizing
    pdf = hist / np.sum(hist)
    return pdf




def power_law_transformation(image, gamma, c):
    """Applies Power Law (Gamma) Transformation"""
    power_image = np.zeros_like(image)
    normalized_image = (image - np.min(image))/(np.max(image)-np.min(image))
    power_image = c*normalized_image**gamma
    power_image = np.clip(power_image * 255, 0, 255).astype(np.uint8)

    return power_image



def histogram_equalization(image):
    """Applies Histogram Equalization"""
    h, w = image.shape
    pdf = compute_pdf(image)
    cdf = np.zeros(256, dtype=float)
    cdf[0] = pdf[0]
    for i in range(1, 256):
        cdf[i] = cdf[i - 1] + pdf[i]

    cdf_normalized = cdf*255
    cdf_normalized_rounded = np.round(cdf_normalized).astype(np.uint8)

    histogram_image = np.zeros_like(image)
    for i in range(h):
        for j in range(w):
            histogram_image[i, j] = cdf_normalized_rounded[image[i, j]]

    return histogram_image


def plot_pdfs(images, titles):
    """Plots the PDFs of one or multiple images"""
    plt.figure(figsize=(15, 5))

    for i, (image, title) in enumerate(zip(images, titles), 1):
        pdf = compute_pdf(image)
        plt.subplot(1, len(images), i)
        plt.bar(range(256), pdf, color='black')
        plt.title(title)
        plt.xlabel("Pixel Intensity")
        plt.ylabel("Probability")
        plt.xlim([0, 255])  # Keep x-axis range consistent

    plt.tight_layout()
    plt.show()


def display_images(power, hist, power_hist):
    """Displays the original, power-law transformed, histogram equalized, and combined images."""
    plt.figure(figsize=(9,6))

    plt.subplot(1,3,1)
    plt.imshow(power, cmap='gray')
    plt.title("Power Law Transformation")
    plt.axis("off")

    plt.subplot(1,3,2)
    plt.imshow(hist, cmap='gray')
    plt.title("Histogram Equalization")
    plt.axis("off")

    plt.subplot(1,3,3)
    plt.imshow(power_hist, cmap='gray')
    plt.title("Power Law >> Histogram")
    plt.axis("off")

    plt.tight_layout()
    plt.show()


def save_images(power, hist, power_hist):
    """Saves the transformed images."""
    cv2.imwrite("Power_Image.jpg", power)
    cv2.imwrite("Histogram_Image.jpg", hist)
    cv2.imwrite("Power_Histogram_Image.jpg", power_hist)
    print("\n✅ Images saved successfully!")
    print("Power Image saved as 'Power_Image.jpg'")
    print("Histogram Image saved as 'Histogram_Image.jpg'")
    print("Power Histogram Image saved as 'Power_Histogram_Image.jpg'")




# Load Image
image_path = r"C:\Users\ahmad\Python codes\Digital Image Processing\images\photo_5.jpg"
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

if image is None:
    print("❌ Error: Image not found. Please check the file path.")
    exit()

# Display Original Image
plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis("off")
plt.show()

# Get User Inputs
gamma, c = get_user_inputs()

# Apply Transformations
power_image = power_law_transformation(image, gamma, c)
histogram_image = histogram_equalization(image)
power_histogram_image = histogram_equalization(power_image)

# Display images
display_images(power_image, histogram_image, power_histogram_image)

# Plot PDFs
images = [image, histogram_image, power_histogram_image]
titles = ["PDF of Original Image", "PDF of Histogram Equalized Image", "PDF of Power Law >> Histogram"]
plot_pdfs(images, titles)

# Save images
save_images(power_image, histogram_image, power_histogram_image)